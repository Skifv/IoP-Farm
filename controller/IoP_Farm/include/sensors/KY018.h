/*
 * Датчик освещенности KY018 (фоторезистор)
 * 
 * Принцип работы:
 * 1. Физическая конструкция: 
 *    - Модуль содержит фоторезистор, который меняет сопротивление в зависимости от освещенности
 *    - Чем ярче свет, тем ниже сопротивление фоторезистора (меньше сопротивление => больше ток)
 *    - На модуле имеется делитель напряжения с фоторезистором
 * 
 * 2. Принцип измерения:
 *    - При изменении освещенности меняется сопротивление фоторезистора
 *    - Это изменяет напряжение на выходе делителя
 *    - АЦП микроконтроллера измеряет это напряжение
 *    - Высокая яркость дает низкие значения АЦП, темнота - высокие
 * 
 * 3. Подключение:
 *    - S (сигнальный) → аналоговый пин ESP32
 *    - "+" (питание) → 3.3V
 *    - "-" (земля) → GND
 * 
 * 4. Калибровка:
 *    - Значения калибровки определяют диапазон работы датчика
 *    - darkValue - значение АЦП при минимальной освещенности (в темноте)
 *    - lightValue - значение АЦП при максимальной освещенности
 *    - По умолчанию используются стандартные значения, но рекомендуется провести калибровку
 * 
 * 5. Процесс калибровки:
 *    - Для калибровки в темноте: закройте датчик, получите значение с getRawValue() и установите как darkValue
 *    - Для калибровки при ярком свете: направьте на датчик яркий свет, получите значение и установите как lightValue
 *    - Используйте метод setCalibration() для установки этих значений
 *    - Помните, что darkValue должен быть больше lightValue!
 * 
 * 6. Характеристики:
 *    - Рабочее напряжение: 3.3V-5V
 *    - Выходной сигнал: аналоговый (0-4095 для ESP32)
 *    - Диапазон измерения: от 0% до 100% освещенности
 */

#pragma once

#include "sensors/ISensor.h"
#include "config/constants.h"

namespace farm::sensors
{
    class KY018 : public ISensor
    {
    private:
        uint8_t pin;
        
        int darkValue;   // Значение АЦП в темноте
        int lightValue;  // Значение АЦП при ярком свете
        
    public:
        KY018(std::shared_ptr<log::ILogger> logger, uint8_t pin);
        
        bool initialize() override;
        
        // Считать уровень освещенности в процентах (0-100%)
        float read() override;
        
        // Получить текущее сырое значение АЦП
        int getRawValue() const;
        
        void setCalibration(int darkValue, int lightValue);
    };
} 